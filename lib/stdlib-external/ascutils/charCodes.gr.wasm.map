{"version":3,"sources":["~lib/rt/common.ts","~lib/shared/typeinfo.ts","stdlib-external/ascutils/charCodes.ts"],"names":[],"mappings":"","sourceRoot":"./charCodes.gr.wasm","sourcesContent":["// Alignment guarantees\n\n// @ts-ignore: decorator\n@inline export const AL_BITS: u32 = 4; // 16 bytes to fit up to v128\n// @ts-ignore: decorator\n@inline export const AL_SIZE: usize = 1 << <usize>AL_BITS;\n// @ts-ignore: decorator\n@inline export const AL_MASK: usize = AL_SIZE - 1;\n\n// Extra debugging\n\n// @ts-ignore: decorator\n@inline export const DEBUG = true;\n\n// ╒════════════════ Common block layout (32-bit) ═════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤\n// │                           MM info                             │ -16\n// ├───────────────────────────────────────────────────────────────┤\n// │                           GC info                             │ -12\n// ├───────────────────────────────────────────────────────────────┤\n// │                          runtime id                           │ -8\n// ├───────────────────────────────────────────────────────────────┤\n// │                         runtime size                          │ -4\n// ╞═══════════════════════════════════════════════════════════════╡\n// │                              ...                              │ ref\n@unmanaged export class BLOCK {\n  /** Memory manager info. */\n  mmInfo: usize; // WASM64 needs adaption\n  /** Garbage collector info. */\n  gcInfo: u32;\n  /** Runtime class id. */\n  rtId: u32;\n  /** Runtime object size. */\n  rtSize: u32;\n}\n\n// @ts-ignore: decorator\n@inline export const BLOCK_OVERHEAD: usize = (offsetof<BLOCK>() + AL_MASK) & ~AL_MASK;\n\n// @ts-ignore: decorator\n@inline export const BLOCK_MAXSIZE: usize = (1 << 30) - BLOCK_OVERHEAD;\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags = TypeinfoFlags.NONE;\n  /** Base class id or `0` if none. */\n  base: u32 = 0;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `StaticArray`. */\n  STATICARRAY = 1 << 2,\n  /** Type is a `Set`. */\n  SET = 1 << 3,\n  /** Type is a `Map`. */\n  MAP = 1 << 4,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 5,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 6,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 7,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 8,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 9,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 10,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 11,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 12,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 13,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 14,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 15,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 16,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 17,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 18,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 19,\n  /** Key is a signed type. */\n  KEY_SIGNED = 1 << 20,\n  /** Key is a float type. */\n  KEY_FLOAT = 1 << 21,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 22,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 23\n}\n","export namespace CharCode {\n  // @ts-ignore: decorator\n  @inline\n  const NEWLINE: u8 = 0xA\n  // @ts-ignore: decorator\n  @inline\n  const SPACE: u8 = 0x20\n  // @ts-ignore: decorator\n  @inline\n  const QUOTE: u8 = 0x22\n  // @ts-ignore: decorator\n  @inline\n  const LPAREN: u8 = 0x28\n  // @ts-ignore: decorator\n  @inline\n  const RPAREN: u8 = 0x29\n  // @ts-ignore: decorator\n  @inline\n  const STAR: u8 = 0x2A\n  // @ts-ignore: decorator\n  @inline\n  const PLUS: u8 = 0x2B\n  // @ts-ignore: decorator\n  @inline\n  const COMMA: u8 = 0x2C\n  // @ts-ignore: decorator\n  @inline\n  const MINUS: u8 = 0x2D\n  // @ts-ignore: decorator\n  @inline\n  const DOT: u8 = 0x2E\n  // @ts-ignore: decorator\n  @inline\n  const SLASH: u8 = 0x2F\n  // @ts-ignore: decorator\n  @inline\n  const _0: u8 = 0x30\n  // @ts-ignore: decorator\n  @inline\n  const _1: u8 = 0x31\n  // @ts-ignore: decorator\n  @inline\n  const _2: u8 = 0x32\n  // @ts-ignore: decorator\n  @inline\n  const _3: u8 = 0x33\n  // @ts-ignore: decorator\n  @inline\n  const _4: u8 = 0x34\n  // @ts-ignore: decorator\n  @inline\n  const _5: u8 = 0x35\n  // @ts-ignore: decorator\n  @inline\n  const _6: u8 = 0x36\n  // @ts-ignore: decorator\n  @inline\n  const _7: u8 = 0x37\n  // @ts-ignore: decorator\n  @inline\n  const _8: u8 = 0x38\n  // @ts-ignore: decorator\n  @inline\n  const _9: u8 = 0x39\n  // @ts-ignore: decorator\n  @inline\n  const COLON: u8 = 0x3A\n  // @ts-ignore: decorator\n  @inline\n  const SEMICOLON: u8 = 0x3B\n  // @ts-ignore: decorator\n  @inline\n  const LANGLE: u8 = 0x3C // \"<\"\n  // @ts-ignore: decorator\n  @inline\n  const RANGLE: u8 = 0x3E // \">\"\n  // @ts-ignore: decorator\n  @inline\n  const A: u8 = 0x41\n  // @ts-ignore: decorator\n  @inline\n  const B: u8 = 0x42\n  // @ts-ignore: decorator\n  @inline\n  const C: u8 = 0x43\n  // @ts-ignore: decorator\n  @inline\n  const D: u8 = 0x44\n  // @ts-ignore: decorator\n  @inline\n  const E: u8 = 0x45\n  // @ts-ignore: decorator\n  @inline\n  const F: u8 = 0x46\n  // @ts-ignore: decorator\n  @inline\n  const G: u8 = 0x47\n  // @ts-ignore: decorator\n  @inline\n  const H: u8 = 0x48\n  // @ts-ignore: decorator\n  @inline\n  const I: u8 = 0x49\n  // @ts-ignore: decorator\n  @inline\n  const J: u8 = 0x4A\n  // @ts-ignore: decorator\n  @inline\n  const K: u8 = 0x4B\n  // @ts-ignore: decorator\n  @inline\n  const L: u8 = 0x4C\n  // @ts-ignore: decorator\n  @inline\n  const M: u8 = 0x4D\n  // @ts-ignore: decorator\n  @inline\n  const N: u8 = 0x4E\n  // @ts-ignore: decorator\n  @inline\n  const O: u8 = 0x4F\n  // @ts-ignore: decorator\n  @inline\n  const P: u8 = 0x50\n  // @ts-ignore: decorator\n  @inline\n  const Q: u8 = 0x51\n  // @ts-ignore: decorator\n  @inline\n  const R: u8 = 0x52\n  // @ts-ignore: decorator\n  @inline\n  const S: u8 = 0x53\n  // @ts-ignore: decorator\n  @inline\n  const T: u8 = 0x54\n  // @ts-ignore: decorator\n  @inline\n  const U: u8 = 0x55\n  // @ts-ignore: decorator\n  @inline\n  const V: u8 = 0x56\n  // @ts-ignore: decorator\n  @inline\n  const W: u8 = 0x57\n  // @ts-ignore: decorator\n  @inline\n  const X: u8 = 0x58\n  // @ts-ignore: decorator\n  @inline\n  const Z: u8 = 0x5A\n  // @ts-ignore: decorator\n  @inline\n  const LBRACK: u8 = 0x5B // \"[\"\n  // @ts-ignore: decorator\n  @inline\n  const RBRACK: u8 = 0x5D // \"]\"\n  // @ts-ignore: decorator\n  @inline\n  const a: u8 = 0x61\n  // @ts-ignore: decorator\n  @inline\n  const b: u8 = 0x62\n  // @ts-ignore: decorator\n  @inline\n  const c: u8 = 0x63\n  // @ts-ignore: decorator\n  @inline\n  const d: u8 = 0x64\n  // @ts-ignore: decorator\n  @inline\n  const e: u8 = 0x65\n  // @ts-ignore: decorator\n  @inline\n  const f: u8 = 0x66\n  // @ts-ignore: decorator\n  @inline\n  const g: u8 = 0x67\n  // @ts-ignore: decorator\n  @inline\n  const h: u8 = 0x68\n  // @ts-ignore: decorator\n  @inline\n  const i: u8 = 0x69\n  // @ts-ignore: decorator\n  @inline\n  const j: u8 = 0x6A\n  // @ts-ignore: decorator\n  @inline\n  const k: u8 = 0x6B\n  // @ts-ignore: decorator\n  @inline\n  const l: u8 = 0x6C\n  // @ts-ignore: decorator\n  @inline\n  const m: u8 = 0x6D\n  // @ts-ignore: decorator\n  @inline\n  const n: u8 = 0x6E\n  // @ts-ignore: decorator\n  @inline\n  const o: u8 = 0x6F\n  // @ts-ignore: decorator\n  @inline\n  const p: u8 = 0x70\n  // @ts-ignore: decorator\n  @inline\n  const q: u8 = 0x71\n  // @ts-ignore: decorator\n  @inline\n  const r: u8 = 0x72\n  // @ts-ignore: decorator\n  @inline\n  const s: u8 = 0x73\n  // @ts-ignore: decorator\n  @inline\n  const t: u8 = 0x74\n  // @ts-ignore: decorator\n  @inline\n  const u: u8 = 0x75\n  // @ts-ignore: decorator\n  @inline\n  const v: u8 = 0x76\n  // @ts-ignore: decorator\n  @inline\n  const w: u8 = 0x77\n  // @ts-ignore: decorator\n  @inline\n  const x: u8 = 0x78\n  // @ts-ignore: decorator\n  @inline\n  const y: u8 = 0x79\n  // @ts-ignore: decorator\n  @inline\n  const z: u8 = 0x7A\n  // @ts-ignore: decorator\n  @inline\n  const LBRACE: u8 = 0x7B\n  // @ts-ignore: decorator\n  @inline\n  const PIPE: u8 = 0x7C\n  // @ts-ignore: decorator\n  @inline\n  const RBRACE: u8 = 0x7D\n}\n"]}